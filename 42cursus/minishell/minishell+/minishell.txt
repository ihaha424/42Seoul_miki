0. minishell
    토큰
        :Regular Expression (Regex) Approach: 정규표현식을 사용하여 명령어를 token 단위로 분할할 수 있습니다. 이 방법은 더 유연하고 복잡한 문자열을 다룰 수 있습니다.
        'echo "Hello, World!" | grep "Hello"'
        ->['echo', '"Hello, World!"', '|', 'grep', '"Hello"']
        이 방법은 큰따옴표로 묶인 문자열을 하나의 토큰으로 인식합니다.
    파싱
        기본적으로 infile, outfile, cmd로 나눈다.
    +)  기본적으로 처음 들어오는 str이 명령어 <,>,<<,>>,| 기호가 오기 전까지 명령어 끝
    
    +)  | 뒤에는 새로 운 줄이라고 생각 하면 됨(한 파이프 라인에 명령어는 1개!)
        대신 input(infile)의 부분에 전에 명령어의 결과가 파이프를 통해 넘어간다.
        명령어의 시작이나 파이프 다은은 무조건 명령어!
    
    +)  redirection
        <(READ_ONLY),<<(HERE_DOC)뒤에는 input
        >(TRUNC),>>(APPEND)뒤에는 output
        인풋 아웃풋은 여러개 일 수 있음(순서는 앞에서 부터 진행)
    
    +)  ctrl + D, ctrl + C의 경우에는 입력받던것 까지 실행되고(출력하고) 종료
    
    +)  ' (단일 따옴표) 안에 있는 메타문자를 해석하지 않아야 합니다.
        " (이중 따옴표) 안에 있는 $ (달러 기호)를 제외한 메타문자를 해석하지 않아야 합니다.
    
    +)  $환경변수
    
    +)  $?는 가장 최근에 실행한 포그라운드 파이프라인의 종료 상태를 확장하여야 합니다.
    
    +)  ctrl-C, ctrl-D 그리고 ctrl-\ 는 bash와 동일하게 동작하여야 합니다.
    
    typedef struct s_token
    {
        char	**cmd;
        ex> {
                {cat, arg1, arg2, NULL}
            }
        char	***redirection;
        ex> {
                {<, in, NULL}
                {<, in2, NULL}
                {>, out3, NULL}
            }
        }
        t_token	*next;
    }	t_token;
        1. '," 제거와 묶음('은 환경 변수 처리X, "은 환경 변수로 치환)
        2. 파이프 별로 나눈다. (각 파이프의 인풋은 처음과 마지막을 제외하면 전 파이프와 다음 파이프가 기본 입출력이다.)
        3. 각 파이프 별로 redirction을 찾고 설정함 그 부분을 제외하고 공백으로 분류해서 cmd와 arg를 찾음
        3. 각 파이프의 redirection을 설정한다.(bash창의 경우 여러개여도 열고 닫고 만 할 뿐 최종적인 input과 output은 마지막 꺼임)
            ->각 파이프별로 fork
            ->각 파이프별로 리더렉션을 먼저 처리 후 명령어 실행
        4. cmd와 arg들을 넣는다.
    Ex>
        1. cat < input | cat -e
            t_token token[2];
            token[0]:
                cmd: {cat, NULL}
                redirection:
                    {
                        {<, input, NULL}
                    }
            token[1]:
                cmd: {cat -e, NULL}
                redirection: NULL
        2. cat input | cat -e
            t_token token[2];
            token[0]:
                cmd: {cat, input,  NULL}
                redirection: NULL
            token[1]:
                cmd: {cat -e, NULL}
                redirection: NULL
        3. token = cat input
            t_token token[1];
            token[0]:
                cmd: {cat, input, NULL}
                redirection: NULL
        4. cat < input > output | wc -l
            t_token token[2];
            token[0]:
                cmd: {cat, NULL}
                redirection:
                    {
                        {<, input, NULL}
                        {>, output, NULL}
                    }
            token[1]:
                cmd: {wc -l, NULL}
                redirection: NULL
        5. wc -l < input1 < input2 > output1 < input3
            t_token token[1];
            token[0]:
                cmd: {wc -l, NULL}
                redirection:
                    {
                        {<, input1, NULL}
                        {<, input2, NULL}
                        {>, output1, NULL}
                        {<, input3, NULL}
                    }
        6. cat << heredoc_word1 << heredoc_word2 > output1
            t_token token[1];
            token[0]:
                cmd: {cat, NULL}
                redirection:
                    {
                        {<<, heredoc_word1, NULL}
                        {<<, heredoc_word2, NULL}
                        {>, output1, NULL}
                    }
        7. cat < input2 < input1 > output1
            t_token token[1];
            token[0]:
                cmd: {cat, NULL}
                redirection:
                    {
                        {<, input2, NULL}
                        {<, input1, NULL}
                        {>, output1, NULL}
                    }
        8. cat < input1 < input2 > output1 | cat output2
            t_token token[2];
            token[0]:
                cmd: {cat, NULL}
                redirection:
                    {
                        {<, input1, NULL}
                        {<, input2, NULL}
                        {>, output1, NULL}
                    }
            token[1]:
                cmd: {cat, output2, NULL}
                redirection: NULL
        9. cat < input1 < input2 > output1 | cat
            t_token token[2];
            token[0]:
                cmd: {cat, NULL}
                redirection:
                    {
                        {<, input1, NULL}
                        {<, input2, NULL}
                        {>, output1, NULL}
                    }
            token[1]:
                cmd: {cat, NULL}
                redirection: NULL
        10. cat < input1 < input2 > output1 | cat < input3
            t_token token[2];
            token[0]:
                cmd: {cat, NULL}
                redirection:
                    {
                        {<, input1, NULL}
                        {<, input2, NULL}
                        {>, output1, NULL}
                    }
            token[1]:
                cmd: {cat, NULL}
                redirection:
                    {
                        {<, input3, NULL}
                    }
        11. cat input1 << heredoc_word1
            t_token token[1];
            token[0]:
                cmd: {cat, input1, NULL}
                redirection:
                    {
                        {<<, heredoc_word1, NULL}
                    }
        12. cat < input1 input2
            t_token token[1];
            token[0]:
                cmd: {cat, input2, NULL}
                redirection:
                    {
                        {<, input1, NULL}
                    }

        execve파트
        1. 각 토큰 별로(파이프별로) 프로세스를 만듬
        2. redirection먼저 파일을 오픈하고 닫고 를 순서대로 다 진행함
        3. 명령어를 실행 후 다음 파이프로감 (기본 파이프로 연결된 것에 먼저 infile하고 redirection 연결하고 진행(모든 파일은 각 redirection에 따라 열리고 닫기는 해야함))
        +)세미 콜론을 처리 해야 할까?
        ;(세미콜론): 
                하나의 명령어 라인에서 여러 개의 명령을 실행(하나의 명령어 다음에 추가)
                첫 번째 명령이 실패하여도 두 번째 명령은 반드시 실행이 됨.
        |(파이프):
                앞에서 나온 명령 결과를 두 번째 명령에서 사용



1. 허용함수
    :readline, rl_clear_history, rl_on_new_line, rl_replace_line, rl_redisplay, add_history \
    printf, malloc, free, write \
    access, dup, dup2, execve, fork, unlink \
    wait, waitpid, wait3, wait4 \
    strerror, perror \
    open, read, close \
    signal, sigaction, sigemptyset, sigaddset, kill, exit \
    getcwd, chdir, stat, lstat, fstat \
    pipe, opendir, readdir, closedir\
    isatty, ttyname, ttyslot \
    ioctl, getenv \
    tcsetattr, tcgetattr, tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs

    * 1. readline, add_history, rl_clear_history, rl_on_new_line, rl_replace_line, rl_redisplay(쉘 프롬프트, 히스토리 등 설정)
        + 1. 헤더 : readline/readline.h, readline/history.h(add_history, rl_clear_history)
        + 2. 형태
            가. char    *readline(const char *prompt);
            나. void    add_history(const char *line);
            다. void    rl_clear_history(void);
            라. void    rl_on_new_line(void);
            마. void    rl_replace_line(const char *text, int clear_undo);
            바. void    rl_redisplya(void);
        + 3. 인수
            가. readline = prompt : 명령 프롬프트로 출력될 문자열.
            나. add_history = line : 사용자가 입력한 명령어 문자열
            다. rl_clear_history : void
            라. rl_on_new_line : void
            마. rl_replace_line
                - text : 명령 프롬프트에 입력된 새로운 문자열
                - clear_undo : undo 기록 삭제 여부 (0:유지, 1:삭제)
            바. rl_redisplay : void
        + 4. 반환값
            가. readline : 입력된 명령어 문자열 (char *) 또는 NULL(입력취소)
            나머지 : void
        + 5. 쓰임
            가. readline : 사용자로부터 명령어를 입력받는 함수. 명령어 히스토리 기능도 포함
            나. add_history : 사용자가 입력한 명령어를 히스토리에 추가하여 이전에 입력한 명령어를 쉽게 재사용 할 수 있도록 합니다. 이 함수는 readline 라이브러리를 사용하는 프로그램에서 사용됩니다.
                * readline() 함수를 사용하여 입력을 받을 때, 화살표키(↑, ↓)를 이용하여 이전에 입력한 명령어들을 검색하거나 조회할 수 있습니다
            다. rl_clear_history : 명령어 히스토리를 모두 지우는 함수
            라. rl_on_new_line : readline 라이브러리가 새로운 명령어를 받을 준비가 되어있음을 readline 라이브러리에 알리는 함수
                * 이전 입력내용을 재사용하기 위해 호출을 함. 이전 입력내용을 저장해놓고 새로운 명령어를 입력받기 위해. 호출하지 않으면 이전 입력내용이 readline라이브러리에 의해 무시될 수 있다.
            마. rl_replace_line : 명령어 히스토리의 이전 명령어를 현재 명령어로 대체하는 함수
            바. rl_redisplay : 명령어 히스토리의 이전 명령어를 재출력하는 함수

    * 2. access, dup, dup2, execve, fork, unlink
        + 1. access : 프로세스가 지정한 파일이 존재하는지, 읽거나 쓰거나 실행이 가능한지 확인하는 함수.
		    - 1. 헤더 : unistd.h
		    - 2. 형태 : int access(const char *pathname, int mode)
		    - 3. 인수
			    - char *pathname : 파일이나 디렉토리 전체이름
			    - int mode : 검사할 내용
		    - 4. 반환
		        - 0 == 가능 또는 파일이 존재함
	            - -1 == mode 에 대해 하나 이상 거절되었거나 에러가 있음. errno에 세팅됌.
		    - 5. 모드 종류
			    - R_OK : 읽기가 가능?
			    - W_OK : 쓰기가 가능?
			    - X_OK : 실행이 가능?
			    - F_OK : 파일이 존재하는가?
	    + 2. dup, dup2 : 파일 디스크립터 복사본을 만드는 함수. 원본 디스크립터와 복사된 디스크립터의 읽기/쓰기 포인터는 공유된다. 즉, 원본과 복사본 디스크립터 마다 따로 읽기/쓰기 포인터가 존재하지 않는다.
		    - 1. 헤더 : unistd.h
		    - 2. 형태 :
                - int dup(int fildes);
				- int dup2(int fildes, int fildes2);
		    - 3. 인수 : int fildes 파일디스크립터
		    - 4. 반환
                - int (dup)복사된 파일 디스크립터 번호로 사용되지 않은 가장 작은 번호가 자동으로 지정되어 반환된다. 
                - (dup2)지정한 번호(fildes2)가 반환된다, 이미 사용하는 번호라면 자동으로 파일을 닫고 다시 지정해준다.  함수 실행이 실패되면 -1이 반환.

	    + 3. execve : 다른 프로그램을 실행하고 자신은 종료하는 함수. execle()이나 execve() 처럼 exec 함수중 e로 끝나느 함수는 환경변수를 지정할 수 있다.
	        - 1. 헤더 : unistd.h
	        - 2. 형태 : int execve(const char *filename, char *const argv[], char *const envp[])
	        - 3. 인수
	   		    - const char *filename : 전제 경로명 (명령어 위치)
			    - char *const argv[] : 인수 배열 (명령어)
			    - char *const envp[] : 환경변수 설정
	        - 4. 반환 : 실패일 때만 -1
	        - 5. 예시 : grep "pipe"를 사용할 때
	   		    - char *arg[] = {"grep", "pipe", NULL};
			    - execve("/usr/bin/grep", arg, NULL)
			    * 위와 같이 쓰면 /usr/bin안에 있는 grep이라는 명령어 폴더를 지정하여, arg안에 있는 grep pipe를 사용한다는 얘기이다.
		        * 대부분의 명령어는 /usr/bin 또는 /bin 안에 있다. 
		        쓰고자 하는 명령어가 어디있는지 ex) ls /usr/bin, ls /bin을 하여 찾은 후 *filename에 넣어주면 된다.

	    + 4. fork : 현재 실행되는 프로세스에 대해 복사본 프로세스를 생성합니다.
		    - 1. 헤더 : unistd.h
		    - 2. 형태 : pid_t fork(void)
		    - 3. 인수 : -
		    - 4. 반환
			    - -1 : 실패
			    - 0 : 자식 프로세스, 새로 생성된 프로세스임
			    - return > 0 : 생성된 자식 프로세스

	    + 5. unlink : 링크를 삭제하는 함수
		    - 1. 헤더 : unistd.h
		    - 2. 형태 : int unlink(const char *path)
		    - 3. 인수 : char *path 삭제하려는 링크 이름
		    - 4. 반환
			    - 성공시 0 실패시 -1

    * 3. wait, waitpid, wait3, wait4 (자식프로세스 종료후 rusage로 여러 정보 얻기)
        + 0. wait : 자식 프로세스 작업이 끝날때 까지 대기하며, 자식프로세스가 종료한 상태를 구하는 함수
		    - 1. 헤더 : sys/wait.h
		    - 2. 형태 : pid_t wait(int *status)
		    - 3. 인수 : int status 자식프로세스 종료 상태
		    - 4. 반환 : pid_t 종료된 자식프로세스 ID

	    + 0. waitpid : wait()함수처럼 자식프로세스가 종료될 때까지 대기합니다. 차이점은 wait()함수가 자식프로세스 중 어느 하나라도 종료되면 복귀되지만, waitpid()는 특정 자식 프로세스가 종료될 때까지 대기합니다. 또한, wait()은 자식 프로세스가 종료될 때까지 block되지만, waitpid()는 WNOHANG 옵션을 사용하면 block 되지 않고 다른작업을 진행할 수 있습니다.
		    - 1. 헤더 : sys/wait.h
		    - 2. 형태 : pid_t waitpid(pid_t pid, int *status, int options)
		    - 3. 인수 : 
			    - pid_t pid 감시할 자식 프로세스 ID
			    - int *status 자식프로세스의 종료 상태 정보
			    - int options 대기를 위한 옵션
		    - 4. 반환 :
			    - 정상 : 종료된 자식프로세스 ID
			    - 실패 : -1, WNOHANG을 사용했고 자식프로세스가 종료되지 않았다면 0
        + 1. 헤더 : <sys/types.h>, <sys/time.h>, <sys/resource.h>, <sys/wait.h>
        + 2. 형태
            - wait3 : pid_t wait3(int *status, int option, struct rusage *rusage);
            - wait4 : pid_t wait4(pid_t pid, int *status, int option, struct rusage *rusage);
        + 3. 인수
            - pid : 대기할 자식프로세스 pid, '-1'은 모든 자식프로세스 대상
            - status : 종료상태값을 저장할 정수형 포인터
            - option : 옵션 플래그로 'WNOHANG'등의 플래그를 지정할 수 있다.
            - rusage : 자식프로세스의 자원 사용정보를 저장할 struct rusage 구조체 포인터 이다.
        + 4. 반환값
        : 성공시 종료된 자식프로세스의 pid, 실패시 -1
        + 5. 쓰임
        : wait3, wait4 함수는 자식프로세스의 종료 기다리고, 종료상태 및 자원사용정보를 얻기위해 사용된다. 이 함수들은 부모프로세스에서 호출되며 자식프로세스가 종료될때까지 블로킹된다.
        + 6. struct rusage {
        struct timeval ru_utime; /* 사용자 수행 시간 */
        struct timeval ru_stime; /* 시스템 수행 시간 */
        long ru_maxrss;          /* 최대 사용 세트 크기 */
        long ru_ixrss;           /* 공유 메모리 크기 */
        long ru_idrss;           /* 비공유 데이터 크기 */
        long ru_isrss;           /* 스택 크기 */
        long ru_minflt;          /* 페이지 오류 수 */
        long ru_majflt;          /* 페이지 폴트 수 */
        long ru_nswap;           /* 스왑된 블록 수 */
        long ru_inblock;         /* 블록 입출력 횟수 */
        long ru_oublock;         /* 블록 입출력 횟수 */
        long ru_msgsnd;          /* 메시지 전송 횟수 */
        long ru_msgrcv;          /* 메시지 수신 횟수 */
        long ru_nsignals;        /* 시그널 수신 횟수 */
        long ru_nvcsw;           /* 가상 컨텍스트 전환 횟수 */
        long ru_nivcsw;          /* 실제 컨텍스트 전환 횟수 */
        };

    * 4. strerror, perror
        + 1. strerror : errno()번호의 에러 내용을 구하기
		    - 1. 헤더 : string.h
		    - 2. 형태 : char *strerror(int errnum)
		    - 3. 인수 : int errnum 에러번호
		    - 4. 반환 : int 에러 번호에 해당하는 오류내용
	            * errno : 함수가 아닌 광역변수이다. 초기값은 0이고, 함수 실행중 에러가 발생하면 errno이 바뀐다.<errno.h>
        + 2. perror : 에러 내용을 출력합니다. 에러내용을 알 수 있는 가장 간단한 방법입니다.
		    - 1. 헤더 : stdio.h
		    - 2. 형태 : void perror(const char *str)
		    - 3. 인수 : const char *str (에러 내용 앞에 출력할 문자열)
		    - 4. 반환 : -

    * 5. signal, sigaction, sigemptyset, sigaddset(시그널 지정)
        + 1. 헤더 : <signal.h>
        + 2. 형태
            - 1. signal : sighandler_t signal(int signum, sighandler_t hander);
            - 2. sigaction : int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
            - 3. sigemptyset : int sigemptyset(sigset_t *set);
            - 4. sigaddset : int sigaddset(sigset_t *set, int signum);
        + 3. 인수
            - 1. signum : 처리할 시그널 번호
            - 2. handler : 시그널 처리기 함수 또는 시그널 처리 행동
            (void (*)(int) 또는 'SIG_IGN', 'SIG_DFL')
            - 3. act : 새로운 시그널 처리 동작을 지정하는 'struct sigaction' 구조체의 포인터
            - 4. oldact : 이전의 시그널 처리 동작을 저장할 struct sigaction 구조체의 포인터
            - 5. set(sigemptyset) : 시그널 집합을 초기화할 sigset_t 구조체의 포인터
            - 6. set(sigaddset) : 시그널 집합에 시그널을 추가할 sigset_t 구조체의 포인터
        + 4. 반환값
            - 1. signal : 이전에 설정된 시그널 처리기 함수 포인터
            (void (*)(int))
            - 2. 나머지 : 성공시 0 실패시 -1 반환, errno설정
        + 5. 쓰임
            - 1. signal : 특정 시그널의 처리동작을 설정하는데 사용된다.
                - signum 인수로 처리할 시그널의 번호를 전달하고 handler 인수로 해당 시그널의 처리기 함수포인터를 전달한다.
                - 시그널이 발생했을 때 호출되는 처리기 함수는 다양한 동작을 수행할 수 있다. 예를들어 시그널 핸들러 함수는 시그널이 발생했을 때 특정작업을 수행하거나 프로그램을 종료할 수 있다.
                - SIG_IGN을 전달하여 해당 시그널을 무시하거나 
                - SIG_DFL을 전달하여 시그널의 기본동작을 수행하도록 설정할 수 있다.
                - SIGINT(Ctrl+C 강제종료)를 터미널에서 하면 SIG_INT가 시그널로 전달되고 SIG_INT에 대한 handler 함수를 지정해놓았을때 해당 함수를 실행 할 수 있다.

            - 2. sigaction :  signal 함수와 유사하게 시그널의 처리 동작을 설정하는 데 사용됩니다.
                - signum 인수로 처리할 시그널의 번호를 전달하고, 
                - act 인수로 struct sigaction 구조체의 포인터를 전달합니다.
                - struct sigaction 구조체는 시그널 처리 동작을 지정하는 다양한 옵션을 포함하고 있습니다. 이를 통해 시그널 처리기 함수, 시그널 블록 설정, 시그널 처리 플래그 등을 세밀하게 제어할 수 있습니다. 또한, 
                - oldact 인수를 통해 이전의 시그널 처리 동작을 저장할 수 있습니다.

            - 3. sigemptyset : sigemptyset 함수는 시그널 집합을 초기화하는 데 사용됩니다.
                - set 인수로 초기화할 sigset_t 구조체의 포인터를 전달합니다.
                시그널 집합은 sigset_t 구조체로 표현되며, 
                - sigemptyset 함수를 사용하여 해당 구조체를 초기화하여 비어있는 상태로 만들 수 있습니다.

            - 4. sigaddset : 시그널 집합에 시그널을 추가하는 데 사용됩니다.
                - set 인수로 시그널을 추가할 sigset_t 구조체의 포인터를 전달하고
                - signum 인수로 추가할 시그널의 번호를 전달합니다.
                시그널 집합은 sigset_t 구조체로 표현되며, sigaddset 함수를 사용하여 해당 구조체에 원하는 시그널을 추가할 수 있습니다.
        
    * 6. getcwd, chdir, stat, lstat, fstat(디렉토리 변경, stat정보 얻기)
        + 1. getcwd : get current working directory
            - 1. 헤더 : <unistd.h>
            - 2. 형태 : char *getcwd(char *buf, size_t size);
            - 3. 인수
                - buf : 현재 디렉토리 경로를 저장할 버퍼로 최소한 size만큼의 크기를 가져야 합니다.
                - size: 버퍼의 크기를 나타냅니다.
            - 4. 반환값: 성공 시, 현재 작업 디렉토리 경로를 포함한 버퍼의 포인터를 반환합니다. 실패 시, NULL을 반환하고 errno 변수를 설정합니다.
            - 5. 쓰임: 현재 작업 디렉토리의 경로를 얻어올 때 사용합니다.
        + 2. chdir : change directory
            - 1. 헤더 : <unistd.h>
            - 2. 형태 : int chdir(const char *path);
            - 3. 인수
                - path : 이동할 디렉토리의 경로를 나타냅니다.
            - 4. 반환값 : 성공시 0 반환, 실패시 -1 반환, errno변수 설정
            - 5. 쓰임 : 현재 작업디렉토리를 변경할 때 사용합니다.
        + 3. stat
            - 1. 헤더: <sys/stat.h>
            - 2. 형태 : int stat(const char *path, struct stat *buf);
            - 3. 인수
                - path : 정보를 얻고자하는 파일의 경로
                - buf : 파일 정보를 저장할 구조체의 포인터
            - 4. 반환값 : 성공시 0 반환, 실패시 -1 반환, errno변수 설정
            - 5. 쓰임 : 파일의 메타데이터(크기, 수정 시간 등)을 얻어오기 위해 사용
            - 6. struct stat{
                mode_t st_mode;      // 파일의 종류 및 접근 권한
                ino_t st_ino;        // inode 번호
                dev_t st_dev;        // 장치 ID
                dev_t st_rdev;       // 특수 파일의 장치 ID
                nlink_t st_nlink;    // 하드 링크 개수
                uid_t st_uid;        // 소유자의 사용자 ID
                id_t st_gid;        // 소유 그룹의 그룹 ID
                off_t st_size;       // 파일 크기 (바이트 단위)
                time_t st_atime;     // 최근 접근 시간
                time_t st_mtime;     // 최근 수정 시간
                time_t st_ctime;     // 최근 상태 변경 시간
                // 추가적인 정보들...
            }
        + 4. lstat
            - 1. 헤더 : <sys/stat.h>
            - 2. 형태 : int lstat(const char *path, struct stat *buf);
            - 3. 인수
                 - path : 정보를 얻고자 하는 파일의 경로
                 - buf : 파일 정보를 저장할 구조체 포인터
            - 4. 반환값 : 성공시 0반환, 실패시 -1반환 ,errno변수 설정
            - 5. 쓰임 : 심볼릭 링크 파일의 메타데이터를 얻어오기 위해 사용, 일반 파일에 대해서는 stat함수와 동일하게 작동
        + 5. fstat
            - 1. 헤더 : <sys/stat.h>
            - 2. 형태 : int fstat(int fd, struct stat *buf);
            - 3. 인수
                - fd : 열린 파일의 파일디스크립터
                - buf : 파일 정보를 저장할 구조체 포인터
            - 4. 반환값 : 성공시 0 반환, 실패시 -1 반환, errno변수 설정
            - 5. 쓰임 : fd에 대핸 상태정보를 가져와 파일의 메타데이터 정보를 저장하는 역할을 한다. 파일의 크기, 소유자, 권한, 생성 및 수정시간 등 다양한 정보를 얻어온다.

    * 7. opendir, readdir, closedir : 디렉토리와 관련된 작업 수행시 사용 opendir로 디렉토리를 열고 readdir함수로 디렉토리 안의 엔트리들을 순차적으로 읽어와서 closedir함수로 디렉토리 스트림을 닫아 자원을 해제한다.
        + 1. opendir
            - 1. 헤더 : <dirent.h>
            - 2. 형태 : DIR *opendir(const char *dirname);
            - 3. 인수
                - dirname : 디텍토리 경로를 나타내는 문자열
            - 4. 반환값 : 성공시 디텍토리 스트림에 대한 포인터인 DIR구조체    
                        포인터 반환
                        실패시 NULL반환, errno 변수 설정
            - 5. 쓰임 : 지정된 디텍토리를 열고 디렉토리 스트림을 반환
        
        + 2. readdir
            - 1. 헤더 : <dirent.h>
            - 2. 형태 : struct dirent   *readdir(DIR *dirp);
            - 3. 인수
                - dirp : 디렉토리 스트림 포인터인 DIR 구조체 포인터
            - 4. 반환값 : 성공시 다음 디렉토리 엔트리에 대한 struct dirent 구조체 포인터를 반환, 더이상 디렉토리가 없는 경우 NULL포인터 반환
            실패시 NULL포인터 반환, errno 변수 설정
            - 5. 쓰임 : 디렉토리 스트림에서 다음 디렉토리 엔트리를 읽고 반환
            - 6. struct dirent{
                    ino_t d_ino;           // inode 번호
                    off_t d_off;           // 디렉토리 엔트리의 오프셋
                    unsigned short d_reclen; // 디렉토리 엔트리의 길이
                    unsigned char d_type;   // 파일의 종류
                    char d_name[];          // 파일 이름 (가변 길이)
                };

        + 3. closedir
            - 1. 헤더 : <dirent.h>
            - 2. 형태 : int closedir(DIR *dirp);
            - 3. 인수
                - dirp : 닫을 디렉토리 스트림에 대한 포인터인 DIR 구조체 포인터
            - 4. 반환값 : 성공시 0반환, 실패시 -1반환, errno변수 설정
            - 5. 쓰임 : 디렉토리 스트림을 닫습니다.
    
    * 8. isatty, ttyname, ttyslot : 터미널 관련 작업에 사용된다.
        + 1. isatty : 프로그램이 터미널과 상호작용 중인지 확인
            - 1. 헤더 : <unistd.h>
            - 2. 형태 : int isatty(int fd);
            - 3. 인수
                - fd : 터미널 여부를 확인할 파일디스크립터
            - 4. 반환값 : 성공시 1, 실패시 0 반환
            - 5. 쓰임
                - 주어진 파일 디스크립터가 터미널인지 여부를 확인하는데 사용된다. 파일 디스크립터가 터미널이면 1을 반환 아니면 0 반환
        + 2. ttyname : 터미널 이름을 가져올때
            - 1. 헤더 : <unistd.h>
            - 2. 형태 : char *ttyname(int fd);
            - 3. 인수
                - fd : 터미널 이름을 가져올 파일디스크립터
            - 4. 반환값 : 성공할 경우 터미널 이름에 대한 문자열 포인터를 반환, 실패시 NULL
            - 5. 쓰임
                - 주어진 파일 디스크립터에 대한 터미널의 이름을 가져온다
        + 3. ttyslot : 터미널 슬롯번호 가져올때
            - 1. 헤더 : <unistd.h>
            - 2. 형태 : int ttyslot(void);
            - 3. 인수 : -
            - 4. 반환값 : 성공시 ttyslot번호를 반환, 실패시 -1 반환 
            - 5. 쓰임
                - 현재 프로세스의 제어 터미널 슬롯 번호를 가져온다. 터미널 슬롯번호는 
                'etc/ttys' 파일에서 찾을 수 있는 터미널의 인덱스다.
    * 9. ioctl, getenv
        + 1. ioctl
            - 1. 헤더 : <sys/ioctl.h>
            - 2. 형태 : int ioctl(int fd, unsigned long request, ...);
            - 3. 인수
                - fd : 파일디스크립터 (파일, 소켓 등)
                - request : 요청 코드(해당 ioctl 작업을 지정)
                - ... : 추가적인 인수들
            - 4. 반환값 : 성공시 0, 실패시 -1 또는 에러코드
            - 5. 쓰임
                - ioctl 함수는 주로 장치 드라이버와 통신하기 위해 사용된다.
                - 특정한 디바이스나 파일에 대해 제어작업을 수행할 때 사용된다.
                - 예를들어 파일디스크립터를 열고, 해당 파일에 대해 ioctl 호출을 하여 파일 속성을 변경하거나 제어 할 수 있다.
                - 이외에도 네트워크 소켓, 시리얼 포트, 프로세스 관련 작업 등 다양한 용도로 사용 될 수 있다.
        + 2. getenv
            - 1. 헤더 : <stdlib.h>
            - 2. 형태 : char *getenv(const char *name);
            - 3. 인수
                - name : 환경변수 이름
            - 4. 반환값
                - 해당 환경변수 값이 존재하면 해당 값의 문자열 포인터를 반환
                - 해당 환경변수가 존재하지 않으면 NULL 반환
            - 5. 쓰임 
                - getenv 함수는 주어진 환경변수의 값을 가져온다.
                - 환경변수는 운영체제에서 시스템의 구성과 동작을 제어하기 위해 사용되는 변수이다.
                - 주로 시스템 설정, 사용자 프로파일, 실행환경 등의 정보를 저장하고 접근하는데 사용된다.
                - getenv 함수를 사용하여 환경변수의 값을 읽어올 수 있다.
                - 예를들어 getenv("PATH")를 호출해 PATH 환경변수 값을 가져올 수 있다.

    * 10. tcsetattr, tcgetattr, tgetent, tgetflag
        + 1. tcsetattr
            - 1. 헤더 : <termios.h>
            - 2. 형태 : int tcsetattr(int fd, int optional_actions, const struct termios *termios_p);
            - 3. 인수
                - fd : 터미널에 대한 파일디스크립터
                - optional_actions : 터미널 속성에 대한 옵션 동작을 지정하는 정수값
                - termios_p : 변경할 터미널 속성을 지정하는 struct termios 구조체에 대한 포인터
            - 4. 반환값 : 성공시 0, 실패시 -1, errno 지정
            - 5. 쓰임 : 터미널의 속성을 termios_p에 지정된 값으로 변경한다.
        + 2. tcgetattr
            - 1. 헤더 : <termios.h>
            - 2. 형태 : int tcgetattr(int fd, struct termios *termios_p);
            - 3. 인수
                - fd : 터미널에 대한 파일디스크립터
                - termios_p : 터미널 속성을 저장할 struct termios 구조체에 대한 포인터
            - 4. 반환값 : 성공시 0, 실패시 -1반환, errno 저장
            - 5. 쓰임 : 터미널의 현재 속성을 가져오기 위해 사용된다. 지정된 파일디스크립터 fd에 대한 터미널 속성을 termios_p에 저장한다.
    
    * 11. tgetnum, tgetstr, tgoto, tputs
        + 1. 
            - 1. 헤더 : 
            - 2. 형태 : 
            - 3. 인수
                - 
            - 4. 반환값 : 
            - 5. 쓰임
                - 
        + 2. 
            - 1. 헤더 : 
            - 2. 형태 : 
            - 3. 인수
                - 
            - 4. 반환값 : 
            - 5. 쓰임
                - 
        + 3. 
            - 1. 헤더 : 
            - 2. 형태 : 
            - 3. 인수
                - 
            - 4. 반환값 : 
            - 5. 쓰임
                - 
        + 4. 
            - 1. 헤더 : 
            - 2. 형태 : 
            - 3. 인수
                - 
            - 4. 반환값 : 
            - 5. 쓰임
                -                                                     








/*
Pasing
---
수정해야함
No such file or directory	: 1
syntax error near unexpected token `newline' : 258
qutoe did not close			: 1

Excution
---
command not found			: 127
is a directory              : 126
커맨드없이 redirection만 있으면	 : 그냥 0으로 종료
찾아야함

built-in
---
찾아야함

++norm
*/