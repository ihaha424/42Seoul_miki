1 sa : swap a - 스택 a의 top에 위치한 두 개의 원소의 순서를 맞바꿉니다. 스택 a가 비어있거나 원소가 1개만 있을 때는 아무 동작도 하지 않습니다.
2 sb : swap b - 스택 b의 top에 위치한 두 개의 원소의 순서를 맞바꿉니다. 스택 b가 비어있거나 원소가 1개만 있을 때는 아무 동작도 하지 않습니다.
3 ss - sa와 sb를 동시에 수행합니다.
4 pa : push a - 스택 b의 top에 위치한 원소 한 개를 스택 a의 top으로 옮깁니다. 스택 b가 비어있을 경우에는 아무 동작도 하지 않습니다.
5 pb : push b - 스택 a의 top에 위치한 원소 한 개를 스택 b의 top으로 옮깁니다. 스택 a가 비어있을 경우에는 아무 동작도 하지 않습니다.
6 ra : rotate a - 스택 a의 원소를 한 칸씩 위로 옮깁니다. 스택의 첫 번째 원소는 맨 마지막 원소가 됩니다.
7 rb : rotate b - 스택 b의 원소를 한 칸씩 위로 옮깁니다. 스택의 첫 번째 원소는 맨 마지막 원소가 됩니다.
8 rr : ra와 rb를 동시에 수행합니다.
9 rra : reverse rotate a - 스택 a의 원소를 한 칸씩 아래로 옮깁니다. 스택의 마지막 원소는 맨 첫 번째 원소가 됩니다.
10 rrb : reverse rotate b - 스택 b의 원소를 한 칸씩 아래로 옮깁니다. 스택의 마지막 원소는 맨 첫 번째 원소가 됩니다.
11 rrr : rra와 rrb를 동시에 수행합니다.

##
프로그램은 스택 a를 작은 숫자가 스택의 top에 오도록 순서대로 정렬하기 위해 가능한 한 적은 개수의 명령어를 사용해야 하고, 사용한 명령어의 목록을 마지막에 출력하여야 합니다.

##처음 들어가는 노드가 a의 맨위임
##next가 위 prev가 아래

top 1				top NULL
1: top 4 bot: 2
2 top 1 bot 3
3 top 2 bot 4
4 top 3 bot 1
bot 4				bot NULL
====================================
top 2				top 1
2 top 4 bot 3			1: top NULL bot: NULL
3 top 2 bot 4
4 top 3 bot 2
bot 4				bot 1
====================================
top 3				top 2
3 top 4 bot 4			2: top 1 bot 1
4 top 3 bot 3			1: top 2 bot: 2
bot 4				bot 1
====================================
top 4				top 3
4 top NULL bot NULL	3 top 1 bot 2
					2: top 3 bot 1
					1: top 2 bot: 3
bot 4				bot 1
====================================
top NULL				top 4
					4 top 1 bot 3
					3 top 4 bot 2
					2: top 3 bot 1
					1: top 2 bot: 4
bot NULL				bot 1

gcc -Wall -Wextra -Werror -fsanitize=address push_swap.c make_stack.c ft_swap.c ft_push.c ft_rotate.c ft_reverce_rotate.c Libft/ft_atoi.c && ./a.out 2 1 3 6 5 8
cc push_swap.c make_stack.c ft_swap.c ft_push.c ft_rotate.c ft_reverce_rotate.c ft_sort.c Libft/ft_atoi.c && ./a.out 2 1 3 6 5 8 4 7 11 9 10 15 13 12 14

/*
	sa(ab);
	pb(ab);
	pb(ab);
	pb(ab);
	sa(ab);
	pa(ab);
	pa(ab);
	pa(ab);
	t_node *temp2;
	int i =0;
	printf("----A----%d\n",ab->size_a);//X
	temp2 = ab->top_a;
	while(temp2 && temp2->key != ab->bottom_a->key && i++<10)//X
	{	
		printf("%d\n",temp2->key);
		temp2 = temp2->bottom;
	}
	if (temp2)
		printf("%d\n",temp2->key);
	printf("----B----%d\n",ab->size_b);
	temp2 = ab->top_b;
	while(temp2 && temp2->key != ab->bottom_b->key&& i++<10)//X
	{	
		printf("%d\n",temp2->key);
		temp2 = temp2->bottom;
	}
	if (temp2)
		printf("%d\n",temp2->key);
*/

#include <stdlib.h>
#include <string.h>

int main(){
	char *heap;

	heap = malloc(sizeof(char) * 6);
	heap[0] = 'h';
	heap[1] = 'e';
	heap[2] = 'l';
	heap[3] = 'l';
	heap[4] = 'o';
	heap[5] = '\0';

	free(heap);
	system("leaks a.out > leaks_result_temp; cat leaks_result_temp | grep leaked && rm -rf leaks_result_temp");
	return (0);
}

./push_swap 1 2 3 4 -
./push_swap "-"
./push_swap "-one"
./push_swap " 1 one  2 3  4 "
./push_swap 1 "  2 3  4 " 1
./push_swap 2 +3  4- " "
./push_swap 2147483648 +3  4- " "
./push_swap +2147483648 +3  4- " "
./push_swap +2147483648 "++3"  4- " "
./push_swap "++3" 4- " "
./push_swap -2147483649 " "
./push_swap " "
./push_swap "" 33