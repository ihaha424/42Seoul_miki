42Pisine에서 사용한 CPP 컴파일 플레그
clang++ -Wall -Wextra -Werror test.cpp


iostream: C의 표준입출력을 담는 라이브러리
	std::cout - 입력 버퍼
		->std: namespace로 정의된 객체가 어디의 소속인지를 알려주는 것.
	std::endl :입력을 끝내겠다.
namespace는 이름을 지정하지 않을 경우 그 파일 안에서만 사용되는 static의 효과와 같다.

C의 포인터를 C++ 에서 사용이 가능하지만 C++에서는 참조자(reference)라는 것이 따로 추가되었다.
Reference
	#include <iostream>
		int main() {
		int a = 3;
		int& another_a = a;
		another_a = 5;
		std::cout << "a : " << a << std::endl;
		std::cout << "another_a : " << another_a << std::endl;
	return 0; }
참조자를 정하는 방법은, 가리 키고자 하는 타입 뒤에 & 를 붙이면 됩니다.
심지어 int* 와 같은 포인터 타입의 참조자를 만드려면 int*& 로 쓰면 됩니다.
여기서 포인터와 참조자의 차이는?
	1. 레퍼런스는 정의 시에 반드시 누구의 별명인지 명시 해야 합니다.
	2. 레퍼런스의 또 한 가지 중요한 특징으로 한 번 어떤 변수의 참조자가 되버린다면,
	더 이상 다른 변수를 참조할 수 없게 됩니다.
		ex>
		int a = 10;
		int &another_a = a; // another_a 는 이제 a 의 참조자!
		int b = 3;
		another_a = b; //이것의 의미는 a에 b를 대입하는 a = b와 같은 의미이다.
	3. 레퍼런스는 메모리 상에 존재하지 않을 수 도 있다.
		another_a 위해서 메모리 상에 공간을 할당할 필요가 있을까요? 
		아니죠! 왜냐하면 another_a 가 쓰이는 자리는 모두 a 로 바꿔치기 하면 되니까요. 
		따라서 이 경우 레퍼 런스는 메모리 상에 존재하지 않게 됩니다.
	4. But 항상 그런 것은 아니다. 함수 인자로 레퍼런스 받기
		int change_val(int &p) {
			p = 3; return 0;
		}
		p 가 정의되는 순간은 change_val(number) 로 호출할 때 이므로 사실상 int& p = number 가 실행된다고 생각하면 됩니다.
		포인터가 인자일 때와는 다르게 number 앞에 & 를 붙일 필요가 없다는 점입니 다. 이는참조자를정의할때그냥int& a = b와같이한것과일맥상통합니다.
		change_val안에서p = 3;이라하는것은main함수의number에number = 3;을 하는 것과 정확히 같은 작업입니다.
	5. 상수에 대한 참조자
		->불가능하다.
		->const int &tep와 같이 상수 참조자로 선언하면 가능하다.
	6. 레퍼런스의 레퍼런스,레퍼런스의 배열, 레퍼런스의 포인터는 존재할 수 없다.
		->reference는 기본적으로 주소값이 메모리상에 존재할 수 없기 떄문에 래퍼런스들의 배열을 정의하는 것은 언어차원에서 금지가 되어 있음.
	7. 배열들의 레퍼런스는 가능하다.
		#include <iostream>
		int main() {
			int arr[3] = {1, 2, 3};
			int(&ref)[3] = arr;
			ref[0] = 2;
			ref[1] = 3;
			ref[2] = 1;
			std::cout << arr[0] << arr[1] << arr[2] << std::endl;
			return 0;
		}
		-> 231
		❖포인터와는 다르게 배열의 레퍼런스의 경우 참조하기 위해선 반드시 배열의 크기를 명시해야 합니다.
	8. 레퍼런스를 리턴하는 함수
		#include <iostream>

		int& function() 
		{ 
			int a = 5;
			return a; 
		}
		int main() 
		{
			int b = 2;
			int c = function();
		}
		-> function()가 return하는 변수 a는 함수가 끝나면 사라짐으로
		int& ref = a;
		// 근데 a가 사라짐
		int b = ref;
		와 같은 의미이다.
		레퍼런스를 리턴하는 함수에서 지역 변수의 레퍼런스를 리턴하지 않도록 조심
	9. 참조자가 아닌 값을 리턴하는 함수를 참조자로 받기도 불가능하다.
		int main() {
			int& c = function();
			return 0;
		}
		위와 마찬가지로 c가 참조하는 function의 리턴값은 사라지기 떄문이다.
		But, int& c를 const형으로 받을 시 
		상수 레퍼런스로 리턴값을 받게 되면 해당 리턴값의 생명이 연장됩니다

	++)
		int x;
		int& y = x;
		먼저 위와 같이 x의 참조자로 y를 정의하였습니다. 이제 y는 x의 또 다른 별명이 됩니다.
		int& z = y;
		그런데 여기서 y가 int& 니까 y의 참조자 타입은 int&& 가 되야 하지 않을까?
		->아니다. 별명의 별명을 만들 필요는 없다! 실제로 C++ 문법 상 참조자의 참조자를 만드는 것은 금지되어 있습니다.
	❖참조자를 사용하게되면 불필요한 &와 *가 필요없기 때문에 코드를 훨씬 간결하게 나타낼 수 있다.

-------------------------------------------
C++에서는 heap영역을 사용 할떄 new, delete로 사용한다. (free, malloc과 대응)

C++ 에서는 편리하게도 소스의 아무대서나 변수를 선언할 수 있으며, 그 변수는 그 변수를 포함하고 있는 중괄호를 빠져 나갈 때 소멸됩니다. 
	ex>
	int a = 4;
	{
		std::cout << "외부의 변수 1" << a << std::endl;
		int a = 3;
		std::cout << "내부의 변수 " << a << std::endl;
	}
	std::cout << "외부의 변수 2" << a << std::endl;
	>> 4
	>> 3
	>> 4
	->>버전 차이때문인지 모르겠지만 c에서도 된다??
